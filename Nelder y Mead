import numpy as np
from scipy.optimize import minimize

# Define la función objetivo que deseas minimizar
def objective_function(x):
    return x[0]**2 + x[1]**2

# Punto de inicio
initial_guess = [1.0, 1.0]

# Definir una función personalizada para el método Nelder-Mead
def nelder_mead(func, x0, tol=1e-6, max_iter=1000):
    n = len(x0)
    vertices = [x0]
    for i in range(n):
        x = x0.copy()
        x[i] += 1.0
        vertices.append(x)
    
    for i in range(max_iter):
        vertices.sort(key=lambda x: func(x))
        best = vertices[0]
        worst = vertices[-1]
        centroid = np.mean(vertices[:-1], axis=0)
        reflection = centroid + (centroid - worst)
        
        if func(reflection) < func(worst):
            expansion = centroid + 2.0 * (reflection - centroid)
            if func(expansion) < func(reflection):
                vertices[-1] = expansion
            else:
                vertices[-1] = reflection
        else:
            contraction = centroid + 0.5 * (worst - centroid)
            if func(contraction) < func(worst):
                vertices[-1] = contraction
            else:
                for i in range(1, n+1):
                    vertices[i] = 0.5 * (vertices[i] + best)
        
        if np.linalg.norm(vertices[0] - vertices[-1]) < tol:
            break
    
    return vertices[0]

# Utiliza el método Nelder-Mead personalizado
result = nelder_mead(objective_function, initial_guess)

# Imprime los resultados
print("Valor mínimo encontrado:", objective_function(result))
print("Punto de mínimo:", result)
